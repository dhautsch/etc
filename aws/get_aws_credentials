#!/bin/bash
test -n "$SET_MINUSX" && set -x

EC=1

if test -z "$MY_USERID"
then
    echo "FATAL - ENV VAR MY_USERID UNDEFINED"
    exit $EC
fi

if test -z "$MY_PASSWORD"
then
    echo "FATAL - ENV VAR MY_PASSWORD UNDEFINED"
    exit $EC
fi

if test -z "$MY_AWS_ROLE"
then
    echo "FATAL - ENV VAR MY_AWS_ROLE UNDEFINED"
    exit $EC
fi

#
# Edit below here with caution - don@hautsch.com
#
BASENAME=$(basename $0)
TOP=$(cd $(dirname $0) && pwd)
TMPDIR=$(date +/tmp/tmp-$(basename $0)-%Y%m%d%H%M%S-$$)

umask 077

if mkdir -p $TMPDIR
then
    true
else
    echo "FATAL - CANNOT CREATE DIR $TMPDIR"
    exit $EC
fi

if test -n "$KEEP_TMP"
then
    echo "TMP_DIR=$TMPDIR"
else
    trap "rm -rf $TMPDIR" EXIT
fi

CURL=/usr/bin/curl
MY_AD_DOMAIN=yoyodyne
MY_STS=sts.yoyodyne.com
STS_URL="https://$MY_STS/adfs/ls/idpinitiatedsignon.aspx?loginToRp=urn:amazon:webservices"
COOKIES=$TMPDIR/cookies.txt
OUT1=$TMPDIR/out1.txt
OUT2=$TMPDIR/out2.txt
SAML_BASE64=$TMPDIR/saml_base64.txt
SAML_DECODED=$TMPDIR/saml_decoded.xml
OUT_AUTH=$TMPDIR/out_auth.xml
OUT_ASSUME_ROLE=$TMPDIR/out_assume_role.xml
CURL_STDERR1=$TMPDIR/curl_stderr1.txt
CURL_STDERR2=$TMPDIR/curl_stderr2.txt
NETRC=$TMPDIR/.netrc

cat >$NETRC <<EOF
machine $MY_STS login $MY_AD_DOMAIN\\$MY_USERID password $MY_PASSWORD
EOF

MY_AWS_ROLE="<AttributeValue>([^<>]+$MY_AWS_ROLE[^<>]*)</AttributeValue>"

HOME=$TMPDIR $CURL -v --connect-timeout 10 --max-time 120 -n --ntlm \
    -L \
    -c $COOKIES \
    -b $COOKIES \
    -H 'Accept:*/*' \
    -H 'Connection:Keep-Alive' \
    -H 'Accept-Encoding:gzip, deflate' \
    -A 'Mozilla/5.0 (compatible, MSIE 11, Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko' \
    $STS_URL 2>$CURL_STDERR1 |\
    	tee $OUT_AUTH |\
	perl -lane 'print $1 if m!name=[\042\047]SAMLResponse[\042\047]\s+value=[\042\047]([^\042\047]+)[\042\047]!' |\
	tee $SAML_BASE64 |\
	openssl base64 -d -A |\
	tee $SAML_DECODED |\
	perl -lane 'map {print} split(/,/,$1) if m!$ENV{MY_AWS_ROLE}!' > $OUT1

if test -s $OUT1
then
    STS_URL="https://sts.amazonaws.com?Version=2011-06-15"
    STS_URL="$STS_URL&Action=AssumeRoleWithSAML"
    STS_URL="$STS_URL&PrincipalArn="$(grep :saml-provider/ $OUT1)
    STS_URL="$STS_URL&RoleArn="$(grep :role/ $OUT1)
    STS_URL="$STS_URL&SAMLAssertion="$(perl -lane 's/([^a-zA-Z0-9.~_-])/sprintf("%%%x", ord($1))/ge;print' $SAML_BASE64)

    export HTTPS_PROXY=https://zsproxy.yoyodyne.com:9480

    HOME=$TMPDIR $CURL -v --connect-timeout 10 --max-time 120 -n --ntlm \
    $STS_URL 2>$CURL_STDERR2 |\
	tee $OUT_ASSUME_ROLE |\
	perl -lane 'print "$1=\047$2\047; export $1" if m!<(AccessKeyId|Expiration|SecretAccessKey|SessionToken)>([^<]+)!' |\
	perl -p -e 's/AccessKeyId/AWS_ACCESS_KEY_ID/g' |\
	perl -p -e 's/SecretAccessKey/AWS_SECRET_ACCESS_KEY/g' |\
	perl -p -e 's/SessionToken/AWS_SESSION_TOKEN/g' |\
	perl -p -e 's/Expiration/AWS_ACCESS_EXPIRATION/g' |\
	tee $OUT2

    EXPIRE_TIME=$(perl -lane 'print $1 if m!^AWS_ACCESS_EXPIRATION=\047([^\047]+)\047!' $OUT2)
    if test -n "$EXPIRE_TIME"
    then
        EXPIRE_TIME=$(echo $EXPIRE_TIME | tr 'TZ' '  ')
        EXPIRE_TIME=$(date -ud "$EXPIRE_TIME")
        EXPIRE_TIME=$(date -ud "$EXPIRE_TIME-5mins" +%FT%TZ)
        echo "AWS_ACCESS_EXPIRATION_MINUS_5MIN='$EXPIRE_TIME'; export AWS_ACCESS_EXPIRATION_MINUS_5MIN"
	echo "HTTPS_PROXY=$HTTPS_PROXY; export HTTPS_PROXY"
    fi

    grep SecretAccessKey $OUT_ASSUME_ROLE >/dev/null
    EC=$?
fi

exit $EC
