--- To list all tables owned by the current user, type: 
select tablespace_name, table_name from user_tables; 

--- To list all tables in a database: 
select tablespace_name, table_name from dba_tables; 

--- To list all tables accessible to the current user, type: 
select tablespace_name, table_name from all_tables;

--- To describe a table, type: 
desc <table_name> 

--- Get tables columns and types
select column_name, data_type, data_length, nullable from user_tab_columns

--
-- regex http://www.dba-oracle.com/t_regular_expressions.htm
--
select * from services where regexp_like(host_name, '[dt]lp-[[:alnum:]]+-a001.') 

-- WITH clause to simplify complex SQL
WITH
subquery_name
AS
(the aggregation SQL statement)
SELECT
(query naming subquery_name);

-- get user/sid
SELECT user || '@' || SYS_CONTEXT('USERENV','DB_NAME') from dual

--- 1505298000 is number of secs since 1970-01-01 GMT
SELECT CAST(FROM_TZ(TO_timestamp ('19700101000000', 'YYYYMMDDHH24MISS') + NUMTODSINTERVAL (1505298000, 'SECOND'), 'GMT')  AT TIME ZONE sessiontimezone AS date ) UNIX_TIME_TO_LOCAL_DATE FROM dual;

--- ISO timestamp
select to_char(sysdate, 'YYYY-MM-DD"T"HH24:MI:SS') from dual
select to_date('2015-11-24 00:00:00', 'YYYY-MM-DD HH24:MI:SS') from dual

--- execute immediate select
CREATE OR REPLACE FUNCTION get_num_of_employees (p_loc VARCHAR2, p_job VARCHAR2) 
RETURN NUMBER
IS
  v_query_str VARCHAR2(1000);
  v_num_of_employees NUMBER;
BEGIN
  v_query_str := 'SELECT COUNT(*) FROM emp_' 
                 || p_loc
                 || ' WHERE job = :bind_job';                           
  EXECUTE IMMEDIATE v_query_str
    INTO v_num_of_employees
    USING p_job;
  RETURN v_num_of_employees;
END;
/

--- Implicit Cursor FOR LOOP Statement
BEGIN
  FOR item IN (
    SELECT last_name, job_id
    FROM employees
    WHERE job_id LIKE '%CLERK%'
    AND manager_id > 120
    ORDER BY last_name
  )
  LOOP
    DBMS_OUTPUT.PUT_LINE
      ('Name = ' || item.last_name || ', Job = ' || item.job_id);
  END LOOP;
END;
/

--- Correlated Update
--- Updates only those employees who work in Geneva or Munich (locations 2900 and 2700)
--- Sets department_id for these employees to the department_id corresponding to Bombay (location_id 2100)
--- Sets each employee's salary to 1.1 times the average salary of their department
--- Sets each employee's commission to 1.5 times the average commission of their department
UPDATE employees a 
    SET department_id = 
        (SELECT department_id 
            FROM departments 
            WHERE location_id = '2100'), 
        (salary, commission_pct) = 
        (SELECT 1.1*AVG(salary), 1.5*AVG(commission_pct) 
          FROM employees b 
          WHERE a.department_id = b.department_id) 
    WHERE department_id IN 
        (SELECT department_id 
          FROM departments
          WHERE location_id = 2900 
              OR location_id = 2700); 

--- display a window of results based on the rownum
select *
from
( select rownum rnum, a.*
from (your_query) a
where rownum <= :M )
where rnum >= :N;

-- upsert
MERGE INTO services s
USING dual
ON (env_name = 'Domain_Multi_mdev1_961' and domain_name = 'Domain_Multi_mdev1' and service_name = 'FILES' and host_name = 'dlmulti-ap101')
WHEN MATCHED THEN
  UPDATE SET date_processes = 'Tue Sep 22 17:02:22 EDT 2015', status = 'Available and backed up'
WHEN NOT MATCHED THEN
  INSERT (env_name, domain_name, service_name, host_name, date_processes, status)
  VALUES ('Domain_Multi_mdev1_961', 'Domain_Multi_mdev1', 'FILES', 'dlmulti-ap101', 'Tue Sep 22 17:02:22 EDT 2015', 'Available and backed up')

-- Dump as XML
sqlplus /NOLOG
SQL> CONN <user>/<pass>@<sid>;
SQL> set linesize 150;
SQL> set long 9999999;
SQL> set head off;
SQL> select dbms_xmlgen.getxml('select * from C_REPOS_DATABASE') xml from dual;

-- Dump as html
SET PAGESIZE 20000;
SET MARKUP HTML ON SPOOL ON PREFORMAT OFF ENTMAP ON;
select * from user_tables


select * from v$version where banner like 'Oracle%'

select '   With the '||parameter||' option'
from   sys.v_$option
where  value = 'TRUE';

select '   The '||parameter||' option is not installed'
from   sys.v_$option
where  value <> 'TRUE';

SELECT global_name, user_role_privs.* FROM global_name, user_role_privs

select
   'Hostname : ' || host_name
   ,'Instance Name : ' || instance_name
   ,'Started At : ' || to_char(startup_time,'DD-MON-YYYY HH24:MI:SS') stime
   ,'Uptime : ' || floor(sysdate - startup_time) || ' days(s) ' ||
   trunc( 24*((sysdate-startup_time) -
   trunc(sysdate-startup_time))) || ' hour(s) ' ||
   mod(trunc(1440*((sysdate-startup_time) -
   trunc(sysdate-startup_time))), 60) ||' minute(s) ' ||
   mod(trunc(86400*((sysdate-startup_time) -
   trunc(sysdate-startup_time))), 60) ||' seconds' uptime
from
   sys.v_$instance;


CREATE OR REPLACE PROCEDURE A22RPT.DROP_INTERVAL_PARTITION (C_TBL_NAME     VARCHAR2,
                                                     C_PART_NAME    VARCHAR2)
AS
   CURRENT_INTERVAL   VARCHAR2 (1000);
BEGIN
   SELECT INTERVAL
     INTO CURRENT_INTERVAL
     FROM USER_PART_TABLES
    WHERE TABLE_NAME IN (SELECT table_name FROM user_tab_partitions WHERE table_name = C_TBL_NAME AND partition_name = C_PART_NAME);

IF LENGTH(CURRENT_INTERVAL) > 0
THEN
   EXECUTE IMMEDIATE 'ALTER TABLE ' || C_TBL_NAME || ' SET INTERVAL ()';
   EXECUTE IMMEDIATE 'ALTER TABLE ' || C_TBL_NAME || ' DROP PARTITION ' || C_PART_NAME;
   EXECUTE IMMEDIATE 'ALTER TABLE ' || C_TBL_NAME || ' SET INTERVAL ('  || CURRENT_INTERVAL || ')';
END IF;
END;

CREATE OR REPLACE function A22RPT.get_high_value_as_date(
  p_table_name     in varchar2,
  p_partition_name in varchar2
) return date as
  v_high_value varchar2(1024);
  v_date        date;
begin
  select high_value into v_high_value from user_tab_partitions
    where table_name = upper(p_table_name)
      and partition_name = upper(p_partition_name);
  execute immediate 'select ' || v_high_value || ' from dual' into v_date;
  return v_date;
end;

CREATE OR REPLACE function A22RPT.get_cnt_from_partition(
  p_table_name     in varchar2,
  p_partition_name in varchar2
) return integer as
  v_cnt        integer;
begin
  execute immediate 'SELECT COUNT(*) as CNT FROM ' || p_table_name || ' PARTITION(' || p_partition_name || ')' into v_cnt;
  return v_cnt;
end;


#
# for sqlplus -s /nolog
#
CONNECT user/pass@SID;
SET AUTOCOMMIT OFF;
SET SERVEROUTPUT ON;

BEGIN
  SAVEPOINT start_tran;
  INSERT INTO .... ; -- first DML
  UPDATE .... ; -- second DML
  BEGIN ... END; -- some other work
  UPDATE .... ; -- final DML
  dbms_output.put_line('Updated : ' || SQL%ROWCOUNT);
COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error code ' || SQLCODE || ': ' || SQLERRM);
    ROLLBACK TO start_tran;
END;
/


/*
** https://stackoverflow.com/questions/622289/how-to-check-oracle-database-for-long-running-queries#625147
** queries for checking what is going on with server. gv$ is for RAC use v$ otherwise
** This one shows SQL that is currently "ACTIVE"
*/

  SELECT NVL (s.username, '(oracle)') AS username,
         s.osuser,
         s.inst_id,
         s.sid,
         s.serial#,
         p.spid,
         t.sql_id,
         sql_text
    FROM gv$sqltext_with_newlines t, gv$session s, gv$process p
   WHERE     t.address = s.sql_address
         AND t.hash_value = s.sql_hash_value
         AND s.status = 'ACTIVE'
         AND s.username <> 'SYSTEM'
         AND s.paddr = p.addr
         AND s.inst_id = p.inst_id
ORDER BY s.sid, t.piece;

/*
** This shows locks. Sometimes things are going slow, but it's because it is blocked waiting for a lock
*/

  SELECT NVL (vo.oracle_username, '(oracle)') AS username,
         vo.os_user_name                    AS osuser,
         vo.session_id,
         ao.object_name,
         ao.object_type,
         l.type,                                   -- Type or system/user lock
         l.lmode,                     -- lock mode in which session holds lock
         l.request,
         l.block,
         l.ctime                        -- Time since current mode was granted
    FROM gv$locked_object vo, all_objects ao, gv$lock l
   WHERE     vo.object_id = ao.object_id
         AND l.id1 = ao.object_id
         AND l.sid = vo.session_id
ORDER BY vo.session_id, l.ctime DESC, ao.object_name;

/*
** This is a good one for finding long operations (e.g. full table scans). If it is because of lots of short operations, nothing will show up.
*/

SELECT NVL (s.username, '(oracle)')                      AS username,
       s.osuser,
       l.inst_id,
       l.sid,
       l.serial#,
       p.spid,
       s.lockwait,
       s.status,
       CASE
           WHEN s.status = 'ACTIVE' OR s.status = 'INACTIVE'
           THEN
               FLOOR (s.last_call_et / 60)
           ELSE
               NULL
       END
           last_call_et,
       s.module,
       s.machine,
       s.command,
       s.program,
       TO_CHAR (s.logon_time, 'YYYY-MM-DD"T"HH24:MI:SS') logon_time,
       TO_CHAR (SYSDATE, 'YYYY-MM-DD"T"HH24:MI:SS')      AS curr_time,
       TO_CHAR (l.start_time, 'hh24:mi:ss')              start_time,
       l.message,
       (l.sofar / l.totalwork) * 100                     percent
  FROM gv$session_longops l, gv$session s, gv$process p
 WHERE     l.sofar / l.totalwork < 1
       AND s.INST_ID = l.INST_ID
       AND s.SID = l.SID
       AND s.SERIAL# = l.SERIAL#
       AND s.paddr = p.addr
       AND s.inst_id = p.inst_id;

/*
** show connections
*/

  SELECT NVL (s.username, '(oracle)')                    username,
         s.osuser,
         s.inst_id,
         s.sid,
         s.serial#,
         p.spid,
         s.lockwait,
         s.status,
         CASE
             WHEN s.status = 'ACTIVE' OR s.status = 'INACTIVE'
             THEN
                 FLOOR (s.last_call_et / 60)
             ELSE
                 NULL
         END
             last_call_et,
         s.module,
         s.machine,
         s.command,
         s.program,
         TO_CHAR (s.logon_time, 'YYYY-MM-DD"T"HH24:MI:SS') logon_time,
         TO_CHAR (SYSDATE, 'YYYY-MM-DD"T"HH24:MI:SS')    AS curr_time
    FROM gv$session s, gv$process p
   WHERE s.paddr = p.addr AND s.inst_id = p.inst_id
ORDER BY s.username, s.osuser;
